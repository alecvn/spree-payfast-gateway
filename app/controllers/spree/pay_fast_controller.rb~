class Spree::PayFastController < Spree::BaseController

  protect_from_forgery except: :update

  # Example: CreditCard payment
  # {
  #   "_method"=>"patch",
  #   "authenticity_token"=>"DYrux-LUv80ua2N2HT-DXpdz0EheK6S92sSM5692LsfOEJFgrSqeGqduuI5VEpgPs1XKIks5PZ4ns0FUQdG9AA",
  #   "order"=> {
  #     "payments_attributes"=>[
  #       {
  #         "payment_method_id"=>"2"
  #       }
  #     ]
  #   },
  #   "payment_source"=>{
  #     "2"=>{
  #       "name"=>"TEST",
  #       "number"=>"0000 0000 0000 0000",
  #       "expiry"=>"01/0000",
  #       "verification_value"=>"000",
  #       "cc_type"=>"unknown"
  #     }
  #   },
  #   "commit"=>"Save and Continue",
  #   "controller"=>"spree/checkout",
  #   "action"=>"update",
  #   "state"=>"payment"
  # }


  # Example: PayFast payment
  # {
  #   "m_payment_id"=>"",
  #   "pf_payment_id"=>"1291711",
  #   "payment_status"=>"COMPLETE",
  #   "item_name"=>"Test Product",
  #   "item_description"=>"",
  #   "amount_gross"=>"100.00",
  #   "amount_fee"=>"-2.30",
  #   "amount_net"=>"97.70",
  #   "custom_str1"=>"",
  #   "custom_str2"=>"",
  #   "custom_str3"=>"",
  #   "custom_str4"=>"",
  #   "custom_str5"=>"",
  #   "custom_int1"=>"5",
  #   "custom_int2"=>"",
  #   "custom_int3"=>"",
  #   "custom_int4"=>"",
  #   "custom_int5"=>"",
  #   "name_first"=>"",
  #   "name_last"=>"",
  #   "email_address"=>"",
  #   "merchant_id"=>"10020921",
  #   "signature"=>"67b2a7528008955a8e3c4e3fd71c24f3",
  #   "controller"=>"spree/pay_fast",
  #   "action"=>"update",
  #   "state"=>"payment"
  # }

  def update
    order = Spree::Order.find(params[:custom_int1])
    debugger
    if payment_params_valid? && paying_with_payfast?
      if order.update_from_params(params, permitted_checkout_attributes, request.headers.env)
        order.payments.create!(amount: params[:amount_gross], payment_method_id: 7, state: 'completed')
        order.reload
        order.next

        head :ok
      else
        render :edit
      end
    end
  end

  # When the user is redirected from Pay_Fast back to the shop, we can check the
  # pay_fast transaction status and set the Spree order state accordingly.
  def validate_payment
    order_number, payment_number = split_payment_identifier params[:order_number]
    payment = Spree::Payment.find_by_number payment_number
    order = Spree::Order.find_by_number order_number
    pay_fast = Spree::PaymentMethod.find_by_type 'Spree::Gateway::PayFastGateway'
    pay_fast.update_payment_status payment

    Logger.debug("Redirect URL visited for order #{params[:order_number]}")

    order = order.reload

    # Order is paid for or authorized (e.g. Klarna Pay Later)
    redirect_to order.paid? || payment.pending? ? order_path(order) : checkout_state_path(:payment)
  end

  private

  # Payment identifier is a combination of order_number and payment_id.
  def split_payment_identifier(payment_identifier)
    payment_identifier.split '-'
  end

  def payment_method_id_param
    params[:order][:payments_attributes].first[:payment_method_id]
  end

  def paying_with_payfast?
    true
    # payment_method = PaymentMethod.find(payment_method_id_param)
    # payment_method.is_a? Spree::Gateway::PayFast
  end

  def payment_params_valid?
    #(params[:state] === 'payment')# && params[:order][:payments_attributes]
    true
  end

end
